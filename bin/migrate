#!/usr/bin/env python3

""" migrate

Usage:
  migrate <target> status [--folder=<folder>] [--verbose]
  migrate add <step> <type> [--folder=<folder>] [--verbose]
  migrate <target> up-to (<step> | --latest) [--folder=<folder>] [--verbose] [--dry-run]
  migrate <target> rollback-to (<step> | --zero) [--folder=<folder>] [--verbose] [--dry-run]
  migrate <target> previous [--folder=<folder>] [--verbose] [--dry-run]
  migrate <target> sql <query> [--verbose]
  migrate <target> reset [--verbose]
  migrate <target> force-state <step> [--verbose]
  migrate (-h | --help)

Arguments:

  <step>                 The step name
  <type>                 The file extension
  <target>               Where to execute the migrations

Options:
  -h --help              Show this help.
  --verbose              Let exceptions raise.
  --folder=<folder>      Where to read and store files

"""

from docopt import docopt
import os
import sys
import migrate

if __name__ == '__main__':
    spec = docopt(__doc__)

    root = spec['--folder'] or '%s/migrations' % os.getcwd()

    if spec['--verbose']:
        print('Using root folder: %s' % (root), file=sys.stderr)

    try:
        if spec['status']:
            migrate.status(root, spec['<target>'])

        elif spec['add']:
            migrate.add(root, spec['<step>'], spec['<type>'])

        elif spec['up-to']:
            if spec['--latest']:
                migrate.up_to_latest(root, spec['<target>'], spec['--verbose'], spec['--dry-run'])
            else:
                migrate.up_to(root, spec['<target>'], spec['<step>'], spec['--verbose'], spec['--dry-run'])

        elif spec['previous']:
            migrate.previous(root, spec['<target>'], spec['--verbose'], spec['--dry-run'])

        elif spec['rollback-to']:
            if spec['--zero']:
                migrate.rollback_to_zero(root, spec['<target>'], spec['--verbose'], spec['--dry-run'])
            else:
                migrate.rollback_to(root, spec['<target>'], spec['<step>'], spec['--verbose'], spec['--dry-run'])

        elif spec['sql']:
            results = migrate.sql(root, spec['<target>'], spec['<query>'], spec['--verbose'])
            [print(result) for result in results]

        elif spec['reset']:
            migrate.reset(root, spec['<target>'], spec['--verbose'])

        elif spec['force-state']:
            migrate.force_state(root, spec['<target>'], spec['<step>'], spec['--verbose'])
    except Exception as e:
        if spec['--verbose']:
            raise e

        print(str(e), file=sys.stderr)
        sys.exit(1)

